use set_builder::set;

#[test]
fn full_unpredicated() {
    let set = set! { (x, _y, _z) : x <- [1, 2, 3], _y <- [4, 5, 6], _z <- [7, 8, 9] };

    assert_eq!(
        set.collect::<Vec<_>>(),
        [
            (1, 4, 7),
            (1, 4, 8),
            (1, 4, 9),
            (1, 5, 7),
            (1, 5, 8),
            (1, 5, 9),
            (1, 6, 7),
            (1, 6, 8),
            (1, 6, 9),
            (2, 4, 7),
            (2, 4, 8),
            (2, 4, 9),
            (2, 5, 7),
            (2, 5, 8),
            (2, 5, 9),
            (2, 6, 7),
            (2, 6, 8),
            (2, 6, 9),
            (3, 4, 7),
            (3, 4, 8),
            (3, 4, 9),
            (3, 5, 7),
            (3, 5, 8),
            (3, 5, 9),
            (3, 6, 7),
            (3, 6, 8),
            (3, 6, 9)
        ]
    );
}

#[test]
fn full_predicated() {
    let set = set! { (x, _y, _z) : x <- [1, 2, 3], _y <- [4, 5, 6], _z <- [7, 8, 9], *x > 1 };

    assert_eq!(
        set.collect::<Vec<_>>(),
        [
            (2, 4, 7),
            (2, 4, 8),
            (2, 4, 9),
            (2, 5, 7),
            (2, 5, 8),
            (2, 5, 9),
            (2, 6, 7),
            (2, 6, 8),
            (2, 6, 9),
            (3, 4, 7),
            (3, 4, 8),
            (3, 4, 9),
            (3, 5, 7),
            (3, 5, 8),
            (3, 5, 9),
            (3, 6, 7),
            (3, 6, 8),
            (3, 6, 9)
        ]
    );
}

#[test]
fn enumeration() {
    let set = set! { 1, 2, 3, 4 };
    assert_eq!(set, [1, 2, 3, 4]);
}
